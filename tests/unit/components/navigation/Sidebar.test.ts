// This file is autogenerated.
// Ideally it wouldn't exist, but it's here to test cjs in node
// Changes should go into ./test.js, and if new assertions are needed
// they'll need to be shimmed here as well
import { VueWrapper, flushPromises, mount } from '@vue/test-utils'
import { useRoute, useRouter } from 'vue-router'
import Sidebar from '@/components/navigation/Sidebar.vue'
import { MSidebar } from '@mozaic-ds/vue-3'
import { vi, describe, it, expect } from 'vitest'
import {User} from '@/domain/user'
import { logout } from '@/services/auth'

const mockPush = vi.fn()

vi.mock('vue-router', () => ({
    useRoute: vi.fn(()=> ({name: 'name'})),
    useRouter: vi.fn(()=> ({push: mockPush})),
}))

vi.mock('vue3-i18n', () => ({
    useI18n: vi.fn(()=> ({t: vi.fn(val => val)})),
}))

vi.mock('@/services/auth', () => ({
    logout: vi.fn(),
}))

describe('Sidebar.vue', () => {
  it('mounts correctly', () => {
    const wrapper: VueWrapper<Sidebar> = mount(Sidebar)
    expect(wrapper).toBeDefined()
    expect(wrapper.findComponent(MSidebar).exists()).toBeTruthy()
  })

  it('getHome returns correct SidebarItem', () => {
    const wrapper: VueWrapper<Sidebar> = mount(Sidebar)
    const homeItem = wrapper.vm.getHome()
    expect(homeItem.code).toEqual('home')
    expect(homeItem.label).toEqual('sidebar.home')
    expect(homeItem.icon).toEqual('DisplayHome24')
  })

  it('getPages returns correct SidebarItems', () => {
    const wrapper: VueWrapper<Sidebar> = mount(Sidebar)
    const pages = wrapper.vm.getPages()
    expect(pages.length).toEqual(1)
    expect(pages[0].code).toEqual('about')
    expect(pages[0].label).toEqual('sidebar.about')
    expect(pages[0].icon).toEqual('View36024')
  })

  it('getUserFeatures returns correct SidebarItems', () => {
    const wrapper: VueWrapper<Sidebar> = mount(Sidebar)
    const userFeatures = wrapper.vm.getUserFeatures()
    expect(userFeatures.length).toEqual(1)
    expect(userFeatures[0].code).toEqual('logout')
    expect(userFeatures[0].label).toEqual('sidebar.logout')
  })

  it('onClick page change calls router.push', async () => {
    const user: User = new User({ ldap: 'example', name: 'Mr example'})
    const elem = document.createElement('div')
    if (document.body) document.body.appendChild(elem)
    const wrapper: VueWrapper<Sidebar> = mount(Sidebar,{
        global: {   provide: { user: {value: user} } },
        attachTo: elem
    })
    
    const button = wrapper.find('#about')
    button.trigger('click')
    await flushPromises()
    expect(mockPush).toHaveBeenCalledWith({name: 'about'})
  })

  it('onClick logout calls logout service', async () => {
    const user: User = new User({ ldap: 'example', name: 'Mr example'})
    const elem = document.createElement('div')
    if (document.body) document.body.appendChild(elem)
    const wrapper: VueWrapper<Sidebar> = mount(Sidebar,{
        global: {   provide: { user: {value: user} } },
        attachTo: elem
    })
    
    const button = wrapper.find('#logout')
    button.trigger('click')
    await flushPromises()
    expect(logout).toHaveBeenCalled()
  })
})
